import pygame
import pygame.freetype
import random

def initialize(current, font, screen):
    text_surf_rect = []
    baseline = []
    text_surf = []
    metrics = []
    for i in range(len(current)):
        text_surf_rect.append(font.get_rect(current[i]))
        # in this rect, the y property is the baseline
        # we use since we use the origin mode
    for i in range(len(text_surf_rect)):
        # text_surf_rect[i].y = text_surf_rect[i].y + (i* 15)
        baseline.append(text_surf_rect[i].y)
        # now let's create a surface to render the text on
        # and center it on the screen
    for i in range(len(text_surf_rect)):
        text_surf.append(pygame.Surface(text_surf_rect[i].size))
        text_surf_rect[i].centerx = screen.get_rect().centerx
        # text_surf = pygame.Surface(text_surf_rect.size)

        # calculate the width (and other stuff) for each letter of the text
    for i in range(len(current)):
        metrics.append(font.get_metrics(current[i]))

    return text_surf_rect, baseline, text_surf, metrics

def generate_word_bank():
    infile = open('common_words.txt','r')

    wordBank = []
    for line in infile:
        line = line.rstrip()
        wordBank.append(line)
    infile.close()
    return wordBank

def generate_sentences(wordBank):
    sentence = ""
    while len(sentence) < 40:
        sentence = sentence + random.choice(wordBank) + " "
    return sentence
def main():
    pygame.init()
    screen = pygame.display.set_mode((800, 600))

    wordBank = generate_word_bank()
    sentence = generate_sentences(wordBank)

    current = [generate_sentences(wordBank), generate_sentences(wordBank),generate_sentences(wordBank)]
    current_idx = 0  # points to the current letter, as you have already guessed

    font = pygame.freetype.Font(None, 30)
    # the font in the new freetype module have an origin property.
    # if you set this to True, the render functions take the dest position
    # to be that of the text origin, as opposed to the top-left corner
    # of the bounding box
    font.origin = True
    font_height = font.get_sized_height()

    # we want to know how much space each letter takes during rendering.
    # the item at index 4 is the 'horizontal_advance_x'
    M_ADV_X = 4
    isSentence1 = False
    isSentence2 = False
    isSentence3 = False

    text_surf_rect, baseline, text_surf, metrics = initialize(current,font,screen)
    i = 0
    while True:
        events = pygame.event.get()
        for e in events:
            if e.type == pygame.QUIT:
                return
            if e.type == pygame.KEYDOWN:
                if e.unicode == current[i][current_idx].lower():
                    # if we press the correct letter, move the index
                    current_idx += 1
                    if current_idx >= len(current[i]):
                        # if the sentence is complete, let's prepare the
                        # next surface
                        if i == 0:
                            isSentence1 = True
                        elif i == 1:

                            current.pop(0)
                            current.append(sentence)
                            text_surf_rect, baseline, text_surf, metrics = initialize(current, font, screen)
                            sentence = generate_sentences(wordBank)

                        else:
                            isSentence3 = True
                        i = 1
                        current_idx = 0

                        '''current_idx = 0
                        current = data
                        text_surf_rect = font.get_rect(current)
                        baseline = text_surf_rect.y
                        text_surf = pygame.Surface(text_surf_rect.size)
                        text_surf_rect.center = screen.get_rect().center
                        metrics = font.get_metrics(current)'''

        # clear everything
        screen.fill('white')
        for z in range(len(current)):
            text_surf[z].fill('white')

        # render each letter of the current sentence one by one
        x = 0
        for (idx, (letter, metric)) in enumerate(zip(current[0], metrics[0])):
            # select the right color
            if isSentence1:
                color = 'lightgrey'
            else:
                color = 'black'
            # render the single letter
            font.render_to(text_surf[0], (x, baseline[0]), letter, color)
            # and move the start position
            x += metric[M_ADV_X]
        x = 0
        for (idx, (letter, metric)) in enumerate(zip(current[1], metrics[1])):
            # select the right color
            if isSentence2:
                color = 'lightgrey'

            else:
                color = 'black'
            # render the single letter
            font.render_to(text_surf[1], (x, baseline[1]), letter, color)
            # and move the start position
            x += metric[M_ADV_X]
        x = 0
        for (idx, (letter, metric)) in enumerate(zip(current[2], metrics[2])):

            # select the right color
            if isSentence3:
                color = 'lightgrey'
            else:
                color = 'black'
            # render the single letter
            font.render_to(text_surf[2], (x, baseline[2]), letter, color)
            # and move the start position
            x += metric[M_ADV_X]

        x = 0
        for (idx, (letter, metric)) in enumerate(zip(current[i], metrics[i])):

            # select the right color
            if idx == current_idx:
                color = 'lightblue'
            elif idx < current_idx:
                color = 'lightgrey'
            else:
                color = 'black'
            # render the single letter
            font.render_to(text_surf[i], (x, baseline[i]), letter, color)
            # and move the start position
            x += metric[M_ADV_X]

        screen.blit(text_surf[0], text_surf_rect[0])
        screen.blit(text_surf[1], (text_surf_rect[1].x, text_surf_rect[1].y + 60))
        screen.blit(text_surf[2], (text_surf_rect[2].x, text_surf_rect[2].y + 120))
        pygame.display.flip()


if __name__ == '__main__':
    main()
